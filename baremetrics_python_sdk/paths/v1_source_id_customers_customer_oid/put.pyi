# coding: utf-8

"""
    Production

    Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from baremetrics_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from baremetrics_python_sdk.api_response import AsyncGeneratorResponse
from baremetrics_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from baremetrics_python_sdk import schemas  # noqa: F401

from baremetrics_python_sdk.model.source_update_customer_information_response import SourceUpdateCustomerInformationResponse as SourceUpdateCustomerInformationResponseSchema
from baremetrics_python_sdk.model.source_update_customer_information400_response import SourceUpdateCustomerInformation400Response as SourceUpdateCustomerInformation400ResponseSchema
from baremetrics_python_sdk.model.source_update_customer_information_request import SourceUpdateCustomerInformationRequest as SourceUpdateCustomerInformationRequestSchema

from baremetrics_python_sdk.type.source_update_customer_information_request import SourceUpdateCustomerInformationRequest
from baremetrics_python_sdk.type.source_update_customer_information_response import SourceUpdateCustomerInformationResponse
from baremetrics_python_sdk.type.source_update_customer_information400_response import SourceUpdateCustomerInformation400Response

from ...api_client import Dictionary
from baremetrics_python_sdk.pydantic.source_update_customer_information_request import SourceUpdateCustomerInformationRequest as SourceUpdateCustomerInformationRequestPydantic
from baremetrics_python_sdk.pydantic.source_update_customer_information400_response import SourceUpdateCustomerInformation400Response as SourceUpdateCustomerInformation400ResponsePydantic
from baremetrics_python_sdk.pydantic.source_update_customer_information_response import SourceUpdateCustomerInformationResponse as SourceUpdateCustomerInformationResponsePydantic

# Path params
CustomerOidSchema = schemas.StrSchema
SourceIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'customer_oid': typing.Union[CustomerOidSchema, str, ],
        'source_id': typing.Union[SourceIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_customer_oid = api_client.PathParameter(
    name="customer_oid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CustomerOidSchema,
    required=True,
)
request_path_source_id = api_client.PathParameter(
    name="source_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SourceIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = SourceUpdateCustomerInformationRequestSchema


request_body_source_update_customer_information_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = SourceUpdateCustomerInformationResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: SourceUpdateCustomerInformationResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: SourceUpdateCustomerInformationResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = SourceUpdateCustomerInformation400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: SourceUpdateCustomerInformation400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: SourceUpdateCustomerInformation400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_customer_information_mapped_args(
        self,
        customer_oid: str,
        source_id: str,
        name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        created: typing.Optional[datetime] = None,
        email: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if name is not None:
            _body["name"] = name
        if notes is not None:
            _body["notes"] = notes
        if created is not None:
            _body["created"] = created
        if email is not None:
            _body["email"] = email
        args.body = _body
        if customer_oid is not None:
            _path_params["customer_oid"] = customer_oid
        if source_id is not None:
            _path_params["source_id"] = source_id
        args.path = _path_params
        return args

    async def _aupdate_customer_information_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update Customer
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_customer_oid,
            request_path_source_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/{source_id}/customers/{customer_oid}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_source_update_customer_information_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_customer_information_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update Customer
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_customer_oid,
            request_path_source_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/{source_id}/customers/{customer_oid}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_source_update_customer_information_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateCustomerInformationRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_customer_information(
        self,
        customer_oid: str,
        source_id: str,
        name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        created: typing.Optional[datetime] = None,
        email: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_customer_information_mapped_args(
            customer_oid=customer_oid,
            source_id=source_id,
            name=name,
            notes=notes,
            created=created,
            email=email,
        )
        return await self._aupdate_customer_information_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_customer_information(
        self,
        customer_oid: str,
        source_id: str,
        name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        created: typing.Optional[datetime] = None,
        email: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_customer_information_mapped_args(
            customer_oid=customer_oid,
            source_id=source_id,
            name=name,
            notes=notes,
            created=created,
            email=email,
        )
        return self._update_customer_information_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateCustomerInformation(BaseApi):

    async def aupdate_customer_information(
        self,
        customer_oid: str,
        source_id: str,
        name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        created: typing.Optional[datetime] = None,
        email: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> SourceUpdateCustomerInformationResponsePydantic:
        raw_response = await self.raw.aupdate_customer_information(
            customer_oid=customer_oid,
            source_id=source_id,
            name=name,
            notes=notes,
            created=created,
            email=email,
            **kwargs,
        )
        if validate:
            return SourceUpdateCustomerInformationResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(SourceUpdateCustomerInformationResponsePydantic, raw_response.body)
    
    
    def update_customer_information(
        self,
        customer_oid: str,
        source_id: str,
        name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        created: typing.Optional[datetime] = None,
        email: typing.Optional[str] = None,
        validate: bool = False,
    ) -> SourceUpdateCustomerInformationResponsePydantic:
        raw_response = self.raw.update_customer_information(
            customer_oid=customer_oid,
            source_id=source_id,
            name=name,
            notes=notes,
            created=created,
            email=email,
        )
        if validate:
            return SourceUpdateCustomerInformationResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(SourceUpdateCustomerInformationResponsePydantic, raw_response.body)


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        customer_oid: str,
        source_id: str,
        name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        created: typing.Optional[datetime] = None,
        email: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_customer_information_mapped_args(
            customer_oid=customer_oid,
            source_id=source_id,
            name=name,
            notes=notes,
            created=created,
            email=email,
        )
        return await self._aupdate_customer_information_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def put(
        self,
        customer_oid: str,
        source_id: str,
        name: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        created: typing.Optional[datetime] = None,
        email: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_customer_information_mapped_args(
            customer_oid=customer_oid,
            source_id=source_id,
            name=name,
            notes=notes,
            created=created,
            email=email,
        )
        return self._update_customer_information_oapg(
            body=args.body,
            path_params=args.path,
        )

