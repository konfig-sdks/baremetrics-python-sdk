# coding: utf-8

"""
    Production

    Baremetrics provides real-time subscription metrics for teams built with Stripe, Shopify Partners, Braintree, Recurly, Chargebee, Google Play, and App Store Connect.   In addition to metrics, Baremetrics provides tools that help you reduce churn and grow your business faster:   Recover: Prevent failed charges and keep your hard-earned revenue with our 100% automated toolkit.   Cancellation insights: Learn exactly why your customers cancel, calculate lost revenue by cancellation reason, and send automated emails to win customers back.  Flightpath: Plan for the future with flexible financial modeling tools built for growing SaaS companies.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from baremetrics_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from baremetrics_python_sdk.api_response import AsyncGeneratorResponse
from baremetrics_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from baremetrics_python_sdk import schemas  # noqa: F401

from baremetrics_python_sdk.model.source_update_subscription400_response import SourceUpdateSubscription400Response as SourceUpdateSubscription400ResponseSchema
from baremetrics_python_sdk.model.source_update_subscription_request_addons import SourceUpdateSubscriptionRequestAddons as SourceUpdateSubscriptionRequestAddonsSchema
from baremetrics_python_sdk.model.source_update_subscription_request import SourceUpdateSubscriptionRequest as SourceUpdateSubscriptionRequestSchema
from baremetrics_python_sdk.model.source_update_subscription_response import SourceUpdateSubscriptionResponse as SourceUpdateSubscriptionResponseSchema

from baremetrics_python_sdk.type.source_update_subscription400_response import SourceUpdateSubscription400Response
from baremetrics_python_sdk.type.source_update_subscription_request_addons import SourceUpdateSubscriptionRequestAddons
from baremetrics_python_sdk.type.source_update_subscription_response import SourceUpdateSubscriptionResponse
from baremetrics_python_sdk.type.source_update_subscription_request import SourceUpdateSubscriptionRequest

from ...api_client import Dictionary
from baremetrics_python_sdk.pydantic.source_update_subscription_response import SourceUpdateSubscriptionResponse as SourceUpdateSubscriptionResponsePydantic
from baremetrics_python_sdk.pydantic.source_update_subscription400_response import SourceUpdateSubscription400Response as SourceUpdateSubscription400ResponsePydantic
from baremetrics_python_sdk.pydantic.source_update_subscription_request import SourceUpdateSubscriptionRequest as SourceUpdateSubscriptionRequestPydantic
from baremetrics_python_sdk.pydantic.source_update_subscription_request_addons import SourceUpdateSubscriptionRequestAddons as SourceUpdateSubscriptionRequestAddonsPydantic

# Path params
SubscriptionOidSchema = schemas.StrSchema
SourceIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'subscription_oid': typing.Union[SubscriptionOidSchema, str, ],
        'source_id': typing.Union[SourceIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_subscription_oid = api_client.PathParameter(
    name="subscription_oid",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SubscriptionOidSchema,
    required=True,
)
request_path_source_id = api_client.PathParameter(
    name="source_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=SourceIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = SourceUpdateSubscriptionRequestSchema


request_body_source_update_subscription_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = SourceUpdateSubscriptionResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: SourceUpdateSubscriptionResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: SourceUpdateSubscriptionResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = SourceUpdateSubscription400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: SourceUpdateSubscription400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: SourceUpdateSubscription400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_subscription_mapped_args(
        self,
        plan_oid: str,
        subscription_oid: str,
        source_id: str,
        occurred_at: typing.Optional[datetime] = None,
        addons: typing.Optional[SourceUpdateSubscriptionRequestAddons] = None,
        quantity: typing.Optional[int] = None,
        discount: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if plan_oid is not None:
            _body["plan_oid"] = plan_oid
        if occurred_at is not None:
            _body["occurred_at"] = occurred_at
        if addons is not None:
            _body["addons"] = addons
        if quantity is not None:
            _body["quantity"] = quantity
        if discount is not None:
            _body["discount"] = discount
        args.body = _body
        if subscription_oid is not None:
            _path_params["subscription_oid"] = subscription_oid
        if source_id is not None:
            _path_params["source_id"] = source_id
        args.path = _path_params
        return args

    async def _aupdate_subscription_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update Subscription
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_subscription_oid,
            request_path_source_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/{source_id}/subscriptions/{subscription_oid}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_source_update_subscription_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_subscription_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update Subscription
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_subscription_oid,
            request_path_source_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/{source_id}/subscriptions/{subscription_oid}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_source_update_subscription_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateSubscriptionRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_subscription(
        self,
        plan_oid: str,
        subscription_oid: str,
        source_id: str,
        occurred_at: typing.Optional[datetime] = None,
        addons: typing.Optional[SourceUpdateSubscriptionRequestAddons] = None,
        quantity: typing.Optional[int] = None,
        discount: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_subscription_mapped_args(
            plan_oid=plan_oid,
            subscription_oid=subscription_oid,
            source_id=source_id,
            occurred_at=occurred_at,
            addons=addons,
            quantity=quantity,
            discount=discount,
        )
        return await self._aupdate_subscription_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_subscription(
        self,
        plan_oid: str,
        subscription_oid: str,
        source_id: str,
        occurred_at: typing.Optional[datetime] = None,
        addons: typing.Optional[SourceUpdateSubscriptionRequestAddons] = None,
        quantity: typing.Optional[int] = None,
        discount: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_subscription_mapped_args(
            plan_oid=plan_oid,
            subscription_oid=subscription_oid,
            source_id=source_id,
            occurred_at=occurred_at,
            addons=addons,
            quantity=quantity,
            discount=discount,
        )
        return self._update_subscription_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateSubscription(BaseApi):

    async def aupdate_subscription(
        self,
        plan_oid: str,
        subscription_oid: str,
        source_id: str,
        occurred_at: typing.Optional[datetime] = None,
        addons: typing.Optional[SourceUpdateSubscriptionRequestAddons] = None,
        quantity: typing.Optional[int] = None,
        discount: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> SourceUpdateSubscriptionResponsePydantic:
        raw_response = await self.raw.aupdate_subscription(
            plan_oid=plan_oid,
            subscription_oid=subscription_oid,
            source_id=source_id,
            occurred_at=occurred_at,
            addons=addons,
            quantity=quantity,
            discount=discount,
            **kwargs,
        )
        if validate:
            return SourceUpdateSubscriptionResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(SourceUpdateSubscriptionResponsePydantic, raw_response.body)
    
    
    def update_subscription(
        self,
        plan_oid: str,
        subscription_oid: str,
        source_id: str,
        occurred_at: typing.Optional[datetime] = None,
        addons: typing.Optional[SourceUpdateSubscriptionRequestAddons] = None,
        quantity: typing.Optional[int] = None,
        discount: typing.Optional[int] = None,
        validate: bool = False,
    ) -> SourceUpdateSubscriptionResponsePydantic:
        raw_response = self.raw.update_subscription(
            plan_oid=plan_oid,
            subscription_oid=subscription_oid,
            source_id=source_id,
            occurred_at=occurred_at,
            addons=addons,
            quantity=quantity,
            discount=discount,
        )
        if validate:
            return SourceUpdateSubscriptionResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(SourceUpdateSubscriptionResponsePydantic, raw_response.body)


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        plan_oid: str,
        subscription_oid: str,
        source_id: str,
        occurred_at: typing.Optional[datetime] = None,
        addons: typing.Optional[SourceUpdateSubscriptionRequestAddons] = None,
        quantity: typing.Optional[int] = None,
        discount: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_subscription_mapped_args(
            plan_oid=plan_oid,
            subscription_oid=subscription_oid,
            source_id=source_id,
            occurred_at=occurred_at,
            addons=addons,
            quantity=quantity,
            discount=discount,
        )
        return await self._aupdate_subscription_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def put(
        self,
        plan_oid: str,
        subscription_oid: str,
        source_id: str,
        occurred_at: typing.Optional[datetime] = None,
        addons: typing.Optional[SourceUpdateSubscriptionRequestAddons] = None,
        quantity: typing.Optional[int] = None,
        discount: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_subscription_mapped_args(
            plan_oid=plan_oid,
            subscription_oid=subscription_oid,
            source_id=source_id,
            occurred_at=occurred_at,
            addons=addons,
            quantity=quantity,
            discount=discount,
        )
        return self._update_subscription_oapg(
            body=args.body,
            path_params=args.path,
        )

